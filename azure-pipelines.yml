parameters:
  - name: deploymentName
    type: string
    default: test
  - name: useTimeMinute
    type: number
    default: 59
  - name: currentHour
    type: number
    #K8s Use Coordinated Universal Time (UTC), VN UTC +7
    default: 9
    
trigger: none

resources:
  - repo: self

pool:
  name: Stewie

jobs:
- job: DeployAll
  displayName: 'Deploy API and WEB For ${{ parameters.deploymentName }}'
  steps:
    - powershell: |
        Write-Host "deploymentName: ${{ parameters.deploymentName }}"
        Write-Host "useTimeMinute: ${{ parameters.useTimeMinute }}"
        Write-Host "currentHour: ${{ parameters.currentHour }}"
      displayName: 'Diagnostic - Check deploymentName Value'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/'
        artifact: 'manifests'
        publishLocation: 'pipeline'
      displayName: 'Publish Pipeline Artifact'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
      displayName: 'Download Pipeline Artifact'

    - powershell: |
        $templateFiles = Get-ChildItem -Path $(Pipeline.Workspace)/manifests -Filter '*.yaml' -Recurse
        foreach ($file in $templateFiles) {
          (Get-Content $file.FullName) | ForEach-Object {
            $_ -replace '\$\(deploymentName\)', '${{ parameters.deploymentName }}' `
              -replace '\$\(useTimeMinute\)', '${{ parameters.useTimeMinute }}' `
              -replace '\$\(currentHour\)', '${{ parameters.currentHour }}'
          } | Set-Content $file.FullName
        }
      displayName: 'Replace Variables in YAML Templates'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'VNG K8s API'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/job-restore-admin-db.yaml
          $(Pipeline.Workspace)/manifests/job-restore-data-db.yaml
      displayName: 'Deploy restore database job'

    - powershell: |
        # Additional step to wait for the database to be ONLINE
        $DatabaseName = "1BOSS_${{ parameters.deploymentName }}"
        $ServerName = "61.28.229.125"

        Write-Host "Server Name: $ServerName"
        Write-Host "Database Name: $DatabaseName"

        # Loop for a maximum of $maxAttempts times
        $maxAttempts = 10
        $attempts = 0
        while ($attempts -lt $maxAttempts) {
            $attempts++

            $connectionString = "Server=$ServerName;Database=master;User Id=sa;Password=As@19006123;TrustServerCertificate=True;"
            $databaseStatus = Invoke-Sqlcmd -ConnectionString $connectionString -Query "SELECT state_desc FROM sys.databases WHERE name = '$DatabaseName'"
            $databaseState = $databaseStatus.state_desc

            Write-Host "Database state: $databaseState"

            if ($databaseState -eq "ONLINE") {
                Write-Host "Database is now ONLINE. Proceeding with deployment."
                break
            }
            Write-Host "Waiting for the database to be ONLINE. Attempt $attempts of $maxAttempts."
            Start-Sleep -Seconds 10
        }
        # Check if the loop exited due to reaching the maximum number of attempts
        if ($attempts -eq $maxAttempts) {
            Write-Host "Database did not come ONLINE after $maxAttempts attempts. Canceling deployment."
            exit 1  # Exit the script with a non-zero status code to mark it as failed
        }
      displayName: 'Check database status'
    
    - powershell: |
        # Set your GoDaddy API key and secret
        $apiKey = "gHzYh74VJWFj_GeraDcnduffMvAVVGiDnZP"
        $apiSecret = "JJA6UeV6NoQAc7SSb8hr3W"

        # Set the domain and record information
        $domain = "minhnhut.online"
        $recordType = "A"
        $recordName = "${{ parameters.deploymentName }}api"
        $recordData = "180.93.180.102"
        $ttl = 600

        # Construct the API endpoint URL
        $apiEndpoint = "https://api.godaddy.com/v1/domains/$domain/records"

        # Construct the headers
        $headers = @{
            'Authorization' = "sso-key $($apiKey):$($apiSecret)"
            'Content-Type'  = 'application/json'
        }

        # Construct the payload for the new DNS record
        $payload = ConvertTo-Json @(@{type=$recordType;name=$recordName;data=$recordData;ttl=$ttl})

        # Make the API request to create the DNS record
        $response = Invoke-WebRequest -Uri $apiEndpoint -Method Patch -Headers $headers -Body $payload

        # Display the response
        $response
      displayName: 'Add DNS Record For API'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'VNG K8s API'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/api-data.yaml
          $(Pipeline.Workspace)/manifests/api-deploy.yaml
          $(Pipeline.Workspace)/manifests/api-job-ingress-add-host.yaml
          $(Pipeline.Workspace)/manifests/api-cron-job-run-delete-deploy.yaml
          $(Pipeline.Workspace)/manifests/api-cron-job-ingress-remove-host.yaml
      displayName: 'Deploy api'
    
    - powershell: |
        # Set your GoDaddy API key and secret
        $apiKey = "gHzYh74VJWFj_GeraDcnduffMvAVVGiDnZP"
        $apiSecret = "JJA6UeV6NoQAc7SSb8hr3W"

        # Set the domain and record information
        $domain = "minhnhut.online"
        $recordType = "A"
        $recordName = "${{ parameters.deploymentName }}web"
        $recordData = "116.118.95.121"
        $ttl = 600

        # Construct the API endpoint URL
        $apiEndpoint = "https://api.godaddy.com/v1/domains/$domain/records"

        # Construct the headers
        $headers = @{
            'Authorization' = "sso-key $($apiKey):$($apiSecret)"
            'Content-Type'  = 'application/json'
        }

        # Construct the payload for the new DNS record
        $payload = ConvertTo-Json @(@{type=$recordType;name=$recordName;data=$recordData;ttl=$ttl})

        # Make the API request to create the DNS record
        $response = Invoke-WebRequest -Uri $apiEndpoint -Method Patch -Headers $headers -Body $payload

        # Display the response
        $response
      displayName: 'Add DNS Record For Web'

    - task: Robocopy@1
      inputs:
        source: 'C:\Web\Publish0'
        destination: 'C:\Web\${{ parameters.deploymentName }}'
        copySubDirsAll: true
        copyOptions: '/MT:4 /np /ndl /nfl /nc /ns'
      displayName: "Create publish folder ${{ parameters.deploymentName }}"
    - task: PowerShellOnTargetMachines@3
      inputs:
        Machines: '116.118.95.121:5986'
        UserName: 'web-server\stewie12061'
        UserPassword: 'As@19006123'
        InlineScript: |
          # Define variables
          $folderName = ${{ parameters.deploymentName }}
          $siteName = "$folderName"
          $publishFolder = "C:\Web\$folderName"
          $applicationPoolName = "$folderName"
          $bindingIPAddress = "*"
          $bindingPort = "80"
          $hostname = "${folderName}web.minhnhut.online"  # Fix: Added $ before folderName

          # Check if IIS module is installed
          if (-not (Get-Module -ListAvailable -Name WebAdministration)) {
              Install-Module -Name WebAdministration -Force -AllowClobber
          }

          # Import the WebAdministration module
          Import-Module WebAdministration

          # Check if the website already exists
          if (Test-Path "IIS:\Sites\$siteName") {
              Write-Host "Website '$siteName' already exists. Exiting."
              exit
          }

          # Create Application Pool
          New-WebAppPool -Name $applicationPoolName

          # Create Website with Custom Binding
          New-Website -Name $siteName -PhysicalPath $publishFolder -ApplicationPool $applicationPoolName -Port $bindingPort -HostHeader $hostname -Force

          Write-Host "Website '$siteName' created successfully."

          # Define the path to the web.config file
          $configFilePath = "C:\Web\$folderName\web.config"

          # Check if the file exists
          if (Test-Path $configFilePath) {
              # Load the content of the web.config file
              $configContent = Get-Content -Path $configFilePath -Raw

              # Perform the necessary modifications (replace database names)
              $configContent = $configContent -replace 'Database=22S999_INTERNALPROJECT_1;', "Database=1BOSS_$folderName;"
              $configContent = $configContent -replace 'Database=AS_ADMIN_1BOSS_1;', "Database=AS_ADMIN_1BOSS_$folderName;"

              # Save the modified content back to the web.config file
              $configContent | Set-Content -Path $configFilePath

              Write-Host "web.config file updated successfully."
          } else {
              Write-Host "The web.config file does not exist in the specified path."
          }

        NewPsSessionOptionArguments: '-SkipCACheck -SkipCNCheck -SkipRevocationCheck'
        ignoreLASTEXITCODE: true
        RunPowershellInParallel: false
    
